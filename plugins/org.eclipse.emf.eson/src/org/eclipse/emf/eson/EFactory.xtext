grammar org.eclipse.emf.eson.EFactory with org.eclipse.xtext.common.Terminals
	// TODO remove with Terminals, directly use hidden(WS, ML_COMMENT, SL_COMMENT) 
	// Because we don't want to have the INT terminal (see below at the end); this avoids the warn during generation.

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate eFactory "http://www.eclipse.org/emf/eson/EFactory"

Factory:
	(imports += NamespaceImport)*
	(epackages+=PackageImport)*
	(annotations+=Annotation)*
	root=NewObject;
	
PackageImport:
// TODO Validation rule with "deprecated" warning for 'use', now that we have 'import' instead 
'use' ePackage = [ecore::EPackage|QualifiedName] '.*';
// TODO like the *.Xtext grammar itself does, support namespace and package name based (try the 'import' above!) + maybe support an "as" syntax

NamespaceImport:
	'import' importedNamespace = QualifiedNameWithWildcard	
	// TODO Content Assist for EPackage .. but one COULD also import other named NewObject / EObject, instead of EPackages.. hm. As EPackage will be much more common, just support that.	
;

Annotation:
	CustomNameMapping;

// TODO further consider if name mapping is best put in-line into objects.. it would have to repeat in every file..
// logically this rather belongs into an external mapping, like HUTN's Configuration (HutnConfig), or even better directly into an Xcore as annotations 

CustomNameMapping:
	"@Name" "{" eClass=[ecore::EClass|QualifiedName] "=" nameFeature=[ecore::EAttribute] "}" ;
	
Feature:
	eFeature=[ecore::EStructuralFeature] ":" (value=Value)? ;
	// value isn't really optional semantically of course
	// but because it may be missing while typing, this works out much better in practice like this
	// the EFactoryJavaValidator flags it up if it's really missing
	// without this, there are confusing parsing errors, the proposal provider doesn't work as it should, etc.
	
NewObject:
	eClass=[ecore::EClass|QualifiedName] (name=ValidID)? "{"
		(features += Feature)*
	"}";

Value:
	// The two (!) Syntactic Predicates => are needed here to solve "Decision can match input such as "RULE_ID '.' RULE_ID {RULE_STRING..RULE_DATE, '}', '['..'false'}" using multiple alternatives: 3, 4"
	MultiValue | EnumAttribute | AnyAttribute | =>Containment | =>Reference;

MultiValue:
	{MultiValue} "[" (values += Value)* "]" ;

Reference:
	// NOTE we ref. an EObject, and not an [NewObject].. this EObject is always the
	// respective "real" EObject, in the derived state if its a reference to something
	// in an EFactory resource, or a reference to an existing non-EFactory EObject, 
	// e.g. in an integration scenario with other Xtext grammars.
	value = [ecore::EObject|QualifiedName];
	
Containment:
	value = NewObject;

EnumAttribute: ":" value = [ecore::EEnumLiteral];

AnyAttribute: value = ANY;

terminal ANY returns ecore::EJavaObject: STRING | ANY_OTHER+; // TODO ok to use ANY_OTHER+ instead? 

Attribute: (EnumAttribute | StringAttribute | IntegerAttribute | BooleanAttribute | DoubleAttribute | DateAttribute | NullAttribute);


// TODO Attribute Types should later not be hard-coded here anymore.. Grammar should be more open & generic.

StringAttribute:  value = STRING;

IntegerAttribute: value = LONG;
	
DoubleAttribute:  value = DOUBLE;

DateAttribute:    value = DATE;

NullAttribute:    value = "NULL";
	
BooleanAttribute: value = BOOLEAN;

QualifiedNameWithWildcard: QualifiedName '.*'? ;
QualifiedName: ValidID (=>'.' ValidID)*;
ValidID: ID /* | LONG_ID */ | LONG; // This is needed so that IDs consisting only of digit/numbers work, including in QualifiedName (DS-8268).

// terminal LONG_ID: ('0'..'9')* ID;
terminal BOOLEAN returns ecore::EBoolean : "true" | "false";
terminal LONG returns ecore::ELong : ('-')?  ('0'..'9')+;
terminal DOUBLE returns ecore::EDouble : ('-')?  ('0'..'9')+ '.'  ('0'..'9')+;
// TODO Date RegExp should later not be hard-coded here anymore at all.. Grammar should be more open & generic.
terminal DATE returns ecore::EDate : ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+;

// Due to historic reasons in a closed source an in-house product which uses ESON
// we need to add ',' and '-' to be allowed in IDs.  We also permit ID starting with digits, via the ValidID: ID | LONG above.
// (NOTE: This terminal must be named 'ID' as well, not some new ID2 - unless you write a new ValueConverter for it.)
terminal ID : '^'? ('a'..'z'|'A'..'Z'|'_'|','|'-'|'0'..'9')+ ;
// TODO try this: terminal ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|','|'-'|'0'..'9')* ;

// PS: Order of terminals appears to matter - ID needs to come after BOOLEAN

// TODO copy/paste org.eclipse.xtext.common.Terminals 
//terminal STRING	: 
//			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
//			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" ; 
//terminal ML_COMMENT	: '/*' -> '*/';
//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
//
//terminal WS			: (' '|'\t'|'\r'|'\n')+;
